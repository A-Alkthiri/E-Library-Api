name: 'Content Management'
description: |-

  APIs for managing content in the e-library.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/contents
    metadata:
      groupName: 'Content Management'
      groupDescription: |-

        APIs for managing content in the e-library.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all content.'
      description: 'Retrieve a list of all content items with their related data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "code": 200,
           "data": [
             {
               "id": 1,
               "title": "Introduction to Programming",
               "description": "A basic introduction to programming concepts.",
               "category": {
                 "id": 1,
                 "name": "Technology"
               },
               "content_type": {
                 "id": 1,
                 "name": "Article"
               },
               "user": {
                 "id": 1,
                 "name": "John Doe"
               },
               "media": [
                 {
                   "id": 1,
                   "url": "https://example.com/media/image.jpg"
                 }
               ],
               "created_at": "2024-01-01T00:00:00.000000Z",
               "updated_at": "2024-01-01T00:00:00.000000Z"
             }
           ],
           "message": "Content retrieved successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/contents
    metadata:
      groupName: 'Content Management'
      groupDescription: |-

        APIs for managing content in the e-library.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new content.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the content.'
        required: true
        example: 'Introduction to Programming'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      description:
        name: description
        description: 'A detailed description of the content.'
        required: true
        example: 'A basic introduction to programming concepts.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      category_id:
        name: category_id
        description: 'The ID of the category.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      image_path:
        name: image_path
        description: "The path to the content's image."
        required: true
        example: /images/programming.jpg
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      type_id:
        name: type_id
        description: 'The ID of the content type.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      user_id:
        name: user_id
        description: 'The ID of the user who created the content.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      title: 'Introduction to Programming'
      description: 'A basic introduction to programming concepts.'
      category_id: 1
      image_path: /images/programming.jpg
      type_id: 1
      user_id: 1
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "code": 201,
           "data": {
             "id": 1,
             "title": "Introduction to Programming",
             "description": "A basic introduction to programming concepts.",
             "category": {
               "id": 1,
               "name": "Technology"
             },
             "content_type": {
               "id": 1,
               "name": "Article"
             },
             "user": {
               "id": 1,
               "name": "John Doe"
             },
             "media": [
               {
                 "id": 1,
                 "url": "https://example.com/media/image.jpg"
               }
             ],
             "created_at": "2024-01-01T00:00:00.000000Z",
             "updated_at": "2024-01-01T00:00:00.000000Z"
           },
           "message": "Content created successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
           "code": 422,
           "message": "The given data was invalid."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/contents/{id}'
    metadata:
      groupName: 'Content Management'
      groupDescription: |-

        APIs for managing content in the e-library.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get single content.'
      description: 'Retrieve a specific content item by its ID.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the content.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "code": 200,
           "data": {
             "id": 1,
             "title": "Introduction to Programming",
             "description": "A basic introduction to programming concepts.",
             "category": {
               "id": 1,
               "name": "Technology"
             },
             "content_type": {
               "id": 1,
               "name": "Article"
             },
             "user": {
               "id": 1,
               "name": "John Doe"
             },
             "media": [
               {
                 "id": 1,
                 "url": "https://example.com/media/image.jpg"
               }
             ],
             "created_at": "2024-01-01T00:00:00.000000Z",
             "updated_at": "2024-01-01T00:00:00.000000Z"
           },
           "message": "Content retrieved successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "code": 404,
           "message": "Content not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/contents/{id}'
    metadata:
      groupName: 'Content Management'
      groupDescription: |-

        APIs for managing content in the e-library.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing content.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the content.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the content.'
        required: false
        example: 'Introduction to Programming'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      description:
        name: description
        description: 'A detailed description of the content.'
        required: false
        example: 'A basic introduction to programming concepts.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      category_id:
        name: category_id
        description: 'The ID of the category.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      image_path:
        name: image_path
        description: "The path to the content's image."
        required: false
        example: /images/programming.jpg
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      type_id:
        name: type_id
        description: 'The ID of the content type.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      user_id:
        name: user_id
        description: 'The ID of the user who created the content.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      title: 'Introduction to Programming'
      description: 'A basic introduction to programming concepts.'
      category_id: 1
      image_path: /images/programming.jpg
      type_id: 1
      user_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "code": 200,
           "data": {
             "id": 1,
             "title": "Introduction to Programming",
             "description": "A basic introduction to programming concepts.",
             "category": {
               "id": 1,
               "name": "Technology"
             },
             "content_type": {
               "id": 1,
               "name": "Article"
             },
             "user": {
               "id": 1,
               "name": "John Doe"
             },
             "media": [
               {
                 "id": 1,
                 "url": "https://example.com/media/image.jpg"
               }
             ],
             "created_at": "2024-01-01T00:00:00.000000Z",
             "updated_at": "2024-01-01T00:00:00.000000Z"
           },
           "message": "Content updated successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "code": 404,
           "message": "Content not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/contents/{id}'
    metadata:
      groupName: 'Content Management'
      groupDescription: |-

        APIs for managing content in the e-library.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a content.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the content.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "code": 200,
           "message": "Content deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "code": 404,
           "message": "Content not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
